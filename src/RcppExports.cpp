// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// findPeaksCpp
IntegerVector findPeaksCpp(IntegerVector positions, NumericVector tags, int peakDistance);
RcppExport SEXP _TSSr_findPeaksCpp(SEXP positionsSEXP, SEXP tagsSEXP, SEXP peakDistanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type positions(positionsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tags(tagsSEXP);
    Rcpp::traits::input_parameter< int >::type peakDistance(peakDistanceSEXP);
    rcpp_result_gen = Rcpp::wrap(findPeaksCpp(positions, tags, peakDistance));
    return rcpp_result_gen;
END_RCPP
}
// localFilterCpp
LogicalVector localFilterCpp(IntegerVector positions, NumericVector tags, IntegerVector peakIndices, int peakDistance, double localThreshold, std::string strand);
RcppExport SEXP _TSSr_localFilterCpp(SEXP positionsSEXP, SEXP tagsSEXP, SEXP peakIndicesSEXP, SEXP peakDistanceSEXP, SEXP localThresholdSEXP, SEXP strandSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type positions(positionsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tags(tagsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type peakIndices(peakIndicesSEXP);
    Rcpp::traits::input_parameter< int >::type peakDistance(peakDistanceSEXP);
    Rcpp::traits::input_parameter< double >::type localThreshold(localThresholdSEXP);
    Rcpp::traits::input_parameter< std::string >::type strand(strandSEXP);
    rcpp_result_gen = Rcpp::wrap(localFilterCpp(positions, tags, peakIndices, peakDistance, localThreshold, strand));
    return rcpp_result_gen;
END_RCPP
}
// calculateQuantilePositionCpp
int calculateQuantilePositionCpp(IntegerVector positions, NumericVector tags, double quantile, bool from_end);
RcppExport SEXP _TSSr_calculateQuantilePositionCpp(SEXP positionsSEXP, SEXP tagsSEXP, SEXP quantileSEXP, SEXP from_endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type positions(positionsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tags(tagsSEXP);
    Rcpp::traits::input_parameter< double >::type quantile(quantileSEXP);
    Rcpp::traits::input_parameter< bool >::type from_end(from_endSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateQuantilePositionCpp(positions, tags, quantile, from_end));
    return rcpp_result_gen;
END_RCPP
}
// calculateClusterQuantilesCpp
DataFrame calculateClusterQuantilesCpp(IntegerVector positions, NumericVector tags, IntegerVector cluster_starts, IntegerVector cluster_ends);
RcppExport SEXP _TSSr_calculateClusterQuantilesCpp(SEXP positionsSEXP, SEXP tagsSEXP, SEXP cluster_startsSEXP, SEXP cluster_endsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type positions(positionsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tags(tagsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cluster_starts(cluster_startsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cluster_ends(cluster_endsSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateClusterQuantilesCpp(positions, tags, cluster_starts, cluster_ends));
    return rcpp_result_gen;
END_RCPP
}
// generateTestData
List generateTestData(int n);
RcppExport SEXP _TSSr_generateTestData(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(generateTestData(n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_TSSr_findPeaksCpp", (DL_FUNC) &_TSSr_findPeaksCpp, 3},
    {"_TSSr_localFilterCpp", (DL_FUNC) &_TSSr_localFilterCpp, 6},
    {"_TSSr_calculateQuantilePositionCpp", (DL_FUNC) &_TSSr_calculateQuantilePositionCpp, 4},
    {"_TSSr_calculateClusterQuantilesCpp", (DL_FUNC) &_TSSr_calculateClusterQuantilesCpp, 4},
    {"_TSSr_generateTestData", (DL_FUNC) &_TSSr_generateTestData, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_TSSr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
